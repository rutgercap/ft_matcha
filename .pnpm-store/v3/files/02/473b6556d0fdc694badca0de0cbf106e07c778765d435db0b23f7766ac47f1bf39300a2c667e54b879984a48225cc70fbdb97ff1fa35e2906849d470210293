import { intrinsic, rootSchema } from "@ark/schema";
import { arkModule } from "../utils.js";
const jsonStringDescription = "a JSON string";
export const writeJsonSyntaxErrorProblem = (error) => {
    if (!(error instanceof SyntaxError))
        throw error;
    return `must be ${jsonStringDescription} (${error})`;
};
const root = rootSchema({
    domain: "string",
    predicate: {
        meta: jsonStringDescription,
        predicate: (s, ctx) => {
            try {
                JSON.parse(s);
                return true;
            }
            catch (e) {
                return ctx.reject({
                    code: "predicate",
                    expected: jsonStringDescription,
                    problem: writeJsonSyntaxErrorProblem(e)
                });
            }
        }
    }
});
export const json = arkModule({
    root,
    parse: rootSchema({
        in: "string",
        morphs: (s, ctx) => {
            if (s.length === 0) {
                return ctx.error({
                    code: "predicate",
                    expected: jsonStringDescription,
                    actual: "empty"
                });
            }
            try {
                return JSON.parse(s);
            }
            catch (e) {
                return ctx.error({
                    code: "predicate",
                    expected: jsonStringDescription,
                    problem: writeJsonSyntaxErrorProblem(e)
                });
            }
        },
        declaredOut: intrinsic.json
    })
});
