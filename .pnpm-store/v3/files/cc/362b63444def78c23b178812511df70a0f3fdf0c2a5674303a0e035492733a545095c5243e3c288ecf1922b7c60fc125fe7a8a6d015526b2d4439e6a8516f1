import { builtinConstructors, constructorExtends, getBuiltinNameOfConstructor, objectKindDescriptions, objectKindOrDomainOf, throwParseError } from "@ark/util";
import { Disjoint } from "../shared/disjoint.js";
import { defaultValueSerializer, implementNode } from "../shared/implement.js";
import { writeUnsupportedJsonSchemaTypeMessage } from "../shared/jsonSchema.js";
import { $ark } from "../shared/registry.js";
import { InternalBasis } from "./basis.js";
const implementation = implementNode({
    kind: "proto",
    hasAssociatedError: true,
    collapsibleKey: "proto",
    keys: {
        proto: {
            serialize: ctor => getBuiltinNameOfConstructor(ctor) ?? defaultValueSerializer(ctor)
        }
    },
    normalize: schema => typeof schema === "string" ? { proto: builtinConstructors[schema] }
        : typeof schema === "function" ? { proto: schema }
            : typeof schema.proto === "string" ?
                { ...schema, proto: builtinConstructors[schema.proto] }
                : schema,
    defaults: {
        description: node => node.builtinName ?
            objectKindDescriptions[node.builtinName]
            : `an instance of ${node.proto.name}`,
        actual: data => objectKindOrDomainOf(data)
    },
    intersections: {
        proto: (l, r) => constructorExtends(l.proto, r.proto) ? l
            : constructorExtends(r.proto, l.proto) ? r
                : Disjoint.init("proto", l, r),
        domain: (proto, domain) => domain.domain === "object" ?
            proto
            : Disjoint.init("domain", $ark.intrinsic.object.internal, domain)
    }
});
export class ProtoNode extends InternalBasis {
    builtinName = getBuiltinNameOfConstructor(this.proto);
    serializedConstructor = this.json.proto;
    compiledCondition = `data instanceof ${this.serializedConstructor}`;
    compiledNegation = `!(${this.compiledCondition})`;
    innerToJsonSchema() {
        switch (this.builtinName) {
            case "Array":
                return {
                    type: "array"
                };
            default:
                return throwParseError(writeUnsupportedJsonSchemaTypeMessage(this.description));
        }
    }
    traverseAllows = data => data instanceof this.proto;
    expression = this.proto.name;
    domain = "object";
    get shortDescription() {
        return this.description;
    }
}
export const Proto = {
    implementation,
    Node: ProtoNode
};
