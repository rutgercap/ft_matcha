import type { writeUnassignableDefaultValueMessage } from "@ark/schema";
import type { ErrorMessage } from "@ark/util";
import type { type } from "../../keywords/ark.ts";
import type { UnitLiteral } from "../string/shift/operator/default.ts";
import type { inferAstOut } from "./infer.ts";
import type { astToString } from "./utils.ts";
import type { validateAst } from "./validate.ts";
export type validateDefault<baseAst, unitLiteral extends UnitLiteral, $, args> = validateAst<baseAst, $, args> extends infer e extends ErrorMessage ? e : type.infer<unitLiteral> extends inferAstOut<baseAst, $, args> ? undefined : ErrorMessage<writeUnassignableDefaultValueMessage<astToString<baseAst>, unitLiteral>>;
