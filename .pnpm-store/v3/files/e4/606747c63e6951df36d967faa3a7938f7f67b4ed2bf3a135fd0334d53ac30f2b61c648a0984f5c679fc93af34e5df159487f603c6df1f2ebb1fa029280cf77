import { throwParseError } from "@ark/util";
import { ArkErrors } from "../shared/errors.js";
import { implementNode } from "../shared/implement.js";
import { BaseProp, intersectProps } from "./prop.js";
const implementation = implementNode({
    kind: "optional",
    hasAssociatedError: false,
    intersectionIsOpen: true,
    keys: {
        key: {},
        value: {
            child: true,
            parse: (schema, ctx) => ctx.$.parseSchema(schema)
        },
        default: {
            preserveUndefined: true
        }
    },
    normalize: schema => schema,
    defaults: {
        description: node => `${node.compiledKey}?: ${node.value.description}`
    },
    intersections: {
        optional: intersectProps
    }
});
export class OptionalNode extends BaseProp {
    constructor(...args) {
        super(...args);
        if ("default" in this.inner) {
            const out = this.value.in(this.inner.default);
            if (out instanceof ArkErrors) {
                throwParseError(writeUnassignableDefaultValueMessage(this.serializedKey, out.message));
            }
        }
    }
    expression = `${this.compiledKey}?: ${this.value.expression}`;
}
export const Optional = {
    implementation,
    Node: OptionalNode
};
export const writeUnassignableDefaultValueMessage = (key, message) => `Default value for key ${key} ${message}`;
