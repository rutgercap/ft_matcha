import type { declareNode } from "../shared/declare.ts";
import { type nodeImplementationOf } from "../shared/implement.ts";
import { BaseProp, type Prop } from "./prop.ts";
export declare namespace Optional {
    interface Schema extends Prop.Schema {
        default?: unknown;
    }
    interface Inner extends Prop.Inner {
        default?: unknown;
    }
    type Declaration = declareNode<Prop.Declaration<"optional"> & {
        schema: Schema;
        normalizedSchema: Schema;
        inner: Inner;
    }>;
    type Node = OptionalNode;
}
export declare class OptionalNode extends BaseProp<"optional"> {
    constructor(...args: ConstructorParameters<typeof BaseProp>);
    expression: string;
}
export declare const Optional: {
    implementation: nodeImplementationOf<{
        reducibleTo: "optional";
        errorContext: null;
        kind: "optional";
        prerequisite: object;
        intersectionIsOpen: true;
        childKind: import("../shared/implement.ts").RootKind;
        schema: Optional.Schema;
        normalizedSchema: Optional.Schema;
        inner: Optional.Inner;
    }>;
    Node: typeof OptionalNode;
};
export declare const writeUnassignableDefaultValueMessage: <key extends string, message extends string>(key: key, message: message) => string;
export type writeUnassignableDefaultValueMessage<baseDef extends string, defaultValue extends string> = `Default value ${defaultValue} is not assignable to ${baseDef}`;
