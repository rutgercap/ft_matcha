import type { Module, Submodule } from "../../module.ts";
import type { Branded, constrain } from "../ast.ts";
export declare const uuid: Module<{
    root: import("./string.ts").string.matching<string> | "00000000-0000-0000-0000-000000000000" | "ffffffff-ffff-ffff-ffff-ffffffffffff";
    v4: unknown;
    v6: unknown;
    v1: unknown;
    v2: unknown;
    v3: unknown;
    v5: unknown;
    v7: unknown;
    v8: unknown;
}>;
declare namespace string {
    type uuid = constrain<string, Branded<"uuid">>;
    namespace uuid {
        type v1 = constrain<string, Branded<"uuid.v1">>;
        type v2 = constrain<string, Branded<"uuid.v2">>;
        type v3 = constrain<string, Branded<"uuid.v3">>;
        type v4 = constrain<string, Branded<"uuid.v4">>;
        type v5 = constrain<string, Branded<"uuid.v5">>;
        type v6 = constrain<string, Branded<"uuid.v6">>;
        type v7 = constrain<string, Branded<"uuid.v7">>;
        type v8 = constrain<string, Branded<"uuid.v8">>;
    }
}
export declare namespace uuid {
    type module = Module<submodule>;
    type submodule = Submodule<$>;
    type $ = {
        root: string.uuid;
        v1: string.uuid.v1;
        v2: string.uuid.v2;
        v3: string.uuid.v3;
        v4: string.uuid.v4;
        v5: string.uuid.v5;
        v6: string.uuid.v6;
        v7: string.uuid.v7;
        v8: string.uuid.v8;
    };
}
export {};
