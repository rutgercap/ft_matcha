import type { Module, Submodule } from "../../module.ts";
import type { Branded, constrain, constraint, Constraints, Narrowed, Optional } from "../ast.ts";
import { epoch } from "./epoch.ts";
import { integer } from "./integer.ts";
export declare const number: number.module;
export type AtLeast<rule> = {
    atLeast: constraint<rule>;
};
export type AtMost<rule> = {
    atMost: constraint<rule>;
};
export type MoreThan<rule> = {
    moreThan: constraint<rule>;
};
export type LessThan<rule> = {
    lessThan: constraint<rule>;
};
export type DivisibleBy<rule> = {
    divisibleBy: constraint<rule>;
};
export declare namespace number {
    type atLeast<rule> = constrain<number, AtLeast<rule>>;
    type moreThan<rule> = constrain<number, MoreThan<rule>>;
    type atMost<rule> = constrain<number, AtMost<rule>>;
    type lessThan<rule> = constrain<number, LessThan<rule>>;
    type divisibleBy<rule> = constrain<number, DivisibleBy<rule>>;
    type narrowed = constrain<number, Narrowed>;
    type optional = constrain<number, Optional>;
    type branded<rule> = constrain<number, Branded<rule>>;
    type NaN = branded<"NaN">;
    type Infinity = branded<"Infinity">;
    type NegativeInfinity = branded<"NegativeInfinity">;
    type safe = branded<"safe">;
    type is<constraints extends Constraints> = constrain<number, constraints>;
    type minSchemaToConstraint<schema, rule> = schema extends {
        exclusive: true;
    } ? MoreThan<rule> : AtLeast<rule>;
    type maxSchemaToConstraint<schema, rule> = schema extends {
        exclusive: true;
    } ? LessThan<rule> : AtMost<rule>;
    type withConstraint<constraint> = constraint extends MoreThan<infer rule> ? moreThan<rule> : constraint extends AtLeast<infer rule> ? atLeast<rule> : constraint extends AtMost<infer rule> ? atMost<rule> : constraint extends LessThan<infer rule> ? lessThan<rule> : constraint extends DivisibleBy<infer rule> ? divisibleBy<rule> : constraint extends Optional ? optional : constraint extends Narrowed ? narrowed : never;
    type module = Module<submodule>;
    type submodule = Submodule<$>;
    type $ = {
        root: number;
        epoch: epoch;
        integer: integer;
        safe: safe;
        NaN: NaN;
        Infinity: Infinity;
        NegativeInfinity: NegativeInfinity;
    };
}
