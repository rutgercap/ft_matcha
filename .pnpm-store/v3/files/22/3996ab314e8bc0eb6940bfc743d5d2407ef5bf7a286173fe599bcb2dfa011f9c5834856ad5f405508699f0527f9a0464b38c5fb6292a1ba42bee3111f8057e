import type { array } from "@ark/util";
import type { ResolvedArkConfig } from "../config.ts";
import type { Morph } from "../roots/morph.ts";
import { ArkError, ArkErrors, type ArkErrorCode, type ArkErrorInput } from "./errors.ts";
import type { TraversalPath } from "./utils.ts";
export type MorphsAtPath = {
    path: TraversalPath;
    morphs: array<Morph>;
};
export type BranchTraversalContext = {
    error: ArkError | undefined;
    queuedMorphs: MorphsAtPath[];
};
export declare class TraversalContext {
    path: TraversalPath;
    queuedMorphs: MorphsAtPath[];
    errors: ArkErrors;
    branches: BranchTraversalContext[];
    seen: {
        [id in string]?: unknown[];
    };
    root: unknown;
    config: ResolvedArkConfig;
    constructor(root: unknown, config: ResolvedArkConfig);
    get currentBranch(): BranchTraversalContext | undefined;
    queueMorphs(morphs: array<Morph>): void;
    finalize(): unknown;
    get currentErrorCount(): number;
    hasError(): boolean;
    get failFast(): boolean;
    error<input extends ArkErrorInput>(input: input): ArkError<input extends {
        code: ArkErrorCode;
    } ? input["code"] : "predicate">;
    get data(): unknown;
    reject(input: ArkErrorInput): false;
    mustBe(expected: string): false;
    pushBranch(): void;
    popBranch(): BranchTraversalContext;
}
export type TraversalMethodsByKind<input = unknown> = {
    Allows: TraverseAllows<input>;
    Apply: TraverseApply<input>;
};
export type TraversalKind = keyof TraversalMethodsByKind;
export type TraverseAllows<data = unknown> = (data: data, ctx: TraversalContext) => boolean;
export type TraverseApply<data = unknown> = (data: data, ctx: TraversalContext) => void;
